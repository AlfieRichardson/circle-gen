import numpy as np
import sys
import argparse

def handleInput():

    parser = argparse.ArgumentParser()
    parser.add_argument("-m", "--minimum", 
                        required=False, type=int, default=1,
                        help="The minimum circle diameter (Default: 1)")
    parser.add_argument("-x", "--maximum",
                        required=False, type=int, default=32,
                        help="The minimum circle diameter (Default: 32)")

    args = parser.parse_args()

    if args.minimum >= args.maximum:
        print("Minimum cannot be greater than or equal to maximum")
        sys.exit(1)

    main(args.minimum, args.maximum)
    

def main(min, max):
    minDiameterDefault = min
    maxDiameterDefault = max
    
    strArrList = ""
    for i in range(minDiameterDefault, maxDiameterDefault + 1):
        strArrJava = arrToJavaCode(func(i))
        strArrList += "\tpublic static boolean[][] circle{num} = {array};\n".format(num=i,array=strArrJava)
    
    casesString = generateCases(minDiameterDefault, maxDiameterDefault)
    strSwitchCaseWrapper = "\tpublic static boolean[][] getCircleGrid(int diameter) {{\n\t\tswitch(diameter) {{ {cases} \n\n\t\t\tdefault:\n\t\t\t\tthrow new NullPointerException();\n\t\t}}\n\t}}".format(cases=casesString)

    strJavaWrapper = "// autogenerated circles by poor penguins and ferrets\npublic class CircleTables {{\n{switchCase}\n\n{arrays}\n}}"

    file = open("CircleTables.java", "w")
    file.write(strJavaWrapper.format(arrays=strArrList,switchCase=strSwitchCaseWrapper))
    file.close()

def func(diameter):
    array = np.zeros((diameter,diameter), dtype=int).tolist()
    cirCen = diameter / 2
    for x in range(diameter):
        for y in range(diameter):
            if ((x + 0.5 - cirCen)**2 + (y + 0.5 - cirCen)**2 <= cirCen**2):
                array[x][y] = 1

    return array

def generateCases(minDiameter, maxDiameter):
    outStr = ""

    for i in range(minDiameter, maxDiameter + 1):
        outStr += "\n\t\t\tcase {i}:\n\t\t\t\treturn circle{i};".format(i=i)
    
    return outStr

def arrToJavaCode(array):
    arrayString = str(array).replace("[[", "{\n\t\t{").replace("[", "{").replace("], ","},\n\t\t").replace("]]","}\n\t}")
    return arrayString

handleInput()
