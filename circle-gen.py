import numpy as np

def main():
    maxDiameter = 32
    
    strArrList = ""
    for i in range(1, maxDiameter + 1):
        strArrJava = arrToJavaCode(func(i))
        strArrList += "\tpublic static boolean[][] circle{num} = {array};\n".format(num=i,array=strArrJava)
    
    casesString = generateCases(maxDiameter)
    strSwitchCaseWrapper = "\tpublic static boolean[][] getCircleGrid(int diameter) {{\n\t\tswitch(diameter) {{ {cases} \n\n\t\t\tdefault:\n\t\t\t\tthrow new NullPointerException();\n\t\t}}\n\t}}".format(cases=casesString)

    strJavaWrapper = "// autogenerated circles by poor penguins and ferrets\npublic class CircleTables {{\n{switchCase}\n\n{arrays}\n}}"

    file = open("CircleTables.java", "w")
    file.write(strJavaWrapper.format(arrays=strArrList,switchCase=strSwitchCaseWrapper))
    file.close()

def func(diameter):
    array = np.zeros((diameter,diameter), dtype=int).tolist()
    cirCen = diameter / 2
    for x in range(diameter):
        for y in range(diameter):
            if ((x + 0.5 - cirCen)**2 + (y + 0.5 - cirCen)**2 <= cirCen**2):
                array[x][y] = 1

    return array

def generateCases(numCircles):
    outStr = ""

    for i in range(1, numCircles + 1):
        outStr += "\n\t\t\tcase {i}:\n\t\t\t\treturn circle{i};".format(i=i)
    
    return outStr

def arrToJavaCode(array):
    arrayString = str(array).replace("[[", "{\n\t\t{").replace("[", "{").replace("], ","},\n\t\t").replace("]]","}\n\t}")#.replace("False","false").replace("True","true")
    return arrayString

main()
